// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
// model User {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   name      String?
//   age       Int?
//   isActive  Boolean  @default(true)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   otps      OTP[]
//   sessions  Session[]
  
// }

// model OTP {
//   id        String   @id @default(cuid())
//   email     String
//   code      String
//   attempts  Int      @default(0)
//   expiresAt DateTime
//   used      Boolean  @default(false)
//   createdAt DateTime @default(now())
//   user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
// }

// model Session {
//   id        String     @id @default(uuid())
//   userId    String
//   user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
//   status    SessionStatus @default(DRAFT)
//   token     String     @unique
//   expiresAt DateTime
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   answers   Answer[]
//   thread    Thread?
//   document  Document?
// }

// model Question {
//   id         String           @id @default(uuid())
//   text       String
//   createdAt  DateTime         @default(now())
//   options    QuestionOption[]
//   answers    Answer[]
// }

// model QuestionOption {
//   id         String    @id @default(uuid())
//   questionId String
//   question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
//   label      String
//   value      String
//   createdAt  DateTime  @default(now())
// }

// model Answer {
//   id         String    @id @default(uuid())
//   sessionId  String
//   questionId String
//   value      String
//   createdAt  DateTime  @default(now())
//   session    Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
//   question   Question  @relation(fields: [questionId], references: [id])
// }

// model Thread {
//   id         String     @id @default(uuid())
//   sessionId  String     @unique
//   session    Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
//   createdAt  DateTime   @default(now())
//   messages   Message[]
// }

// model Message {
//   id         String    @id @default(uuid())
//   threadId   String
//   thread     Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
//   role       Role
//   content    String
//   index      Int
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
// }

// model Document {
//   id         String    @id @default(uuid())
//   sessionId  String    @unique
//   session    Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
//   url        String
//   signedAt   DateTime  @default(now())
// }

// enum SessionStatus {
//   DRAFT
//   PENDING
//   APPROVED
//   REJECTED
// }

// enum Role {
//   customer
//   assistant
// }


generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  age        Int?
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  otps       OTP[]
  sessions   Session[]
  qaSessions QASession[]

  @@map("users")
}

model OTP {
  id           String     @id @default(cuid())
  email        String     @unique
  code         String
  attempts     Int        @default(0)
  expiresAt    DateTime
  used         Boolean    @default(false)
  resendCount  Int        @default(0)
  blockedUntil DateTime?
  createdAt    DateTime   @default(now())

  user         User       @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("otps")
}


model Session {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  token      String     @unique
  expiresAt  DateTime
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("sessions")
}

model QASession {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      SessionStatus  @default(DRAFT)
  phase       SessionPhase   @default(DISCOVERY)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  answers     Answer[]
  thread      Thread?
  document    Document?
  personalInfo PersonalInfo?

  @@map("qa_sessions")
}

model Question {
  id         String           @id @default(uuid())
  text       String
  createdAt  DateTime         @default(now())
  options    QuestionOption[]
  answers    Answer[]

  @@map("questions")
}

model QuestionOption {
  id         String    @id @default(uuid())
  questionId String
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  label      String
  value      String
  createdAt  DateTime  @default(now())

  @@map("question_options")
}

model Answer {
  id          String     @id @default(uuid())
  qaSessionId String
  questionId  String
  value       String
  createdAt   DateTime   @default(now())
  qaSession   QASession  @relation(fields: [qaSessionId], references: [id], onDelete: Cascade)
  question    Question   @relation(fields: [questionId], references: [id])

  @@map("answers")
}

model Thread {
  id          String     @id @default(uuid())
  qaSessionId String     @unique
  qaSession   QASession  @relation(fields: [qaSessionId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  messages    Message[]

  @@map("threads")
}

model Message {
  id         String    @id @default(uuid())
  threadId   String
  thread     Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  role       Role
  content    String
  index      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("messages")
}

model Document {
  id          String     @id @default(uuid())
  qaSessionId String     @unique
  qaSession   QASession  @relation(fields: [qaSessionId], references: [id], onDelete: Cascade)
  url         String
  isSigned    Boolean    @default(false)
  signedAt    DateTime   @default(now())

  @@map("document")
}

model PersonalInfo {
  id          String     @id @default(uuid())
  qaSessionId String     @unique
  qaSession   QASession  @relation(fields: [qaSessionId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  age         Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("personal_info")
}

enum SessionStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum SessionPhase {
  DISCOVERY
  CHAT
  PERSONAL_INFO
  SIGNATURE
}

enum Role {
  customer
  assistant
}
